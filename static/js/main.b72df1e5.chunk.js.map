{"version":3,"sources":["homework9_kanban/FormCreateTask.js","homework9_kanban/Task.js","homework9_kanban/Board.js","homework9_kanban/Modal.js","homework9_kanban/App.js","serviceWorker.js","index.js"],"names":["FormCreateTask","addTask","onSubmit","value","type","statuses","colors","Task","task","updateTask","index","tasks","edit","className","priority","title","description","disabled","onClick","status","splice","indexOf","Board","filter","el","map","key","id","ModalBlock","close","modal","Modal","show","onHide","e","preventDefault","target","Header","closeButton","Body","htmlFor","aria-describedby","defaultValue","Footer","Button","variant","initialTasks","uuidv4","App","useState","setTasks","setModal","newTask","reset","Boolean","window","location","hostname","match","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b72df1e5.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction FormCreateTask({addTask}) {\n    return (\n        <div>\n            <form onSubmit={addTask}>\n                Title: <input/>\n                Priority: <select>\n                <option value='1'>Low</option>\n                <option value='2'>Medium</option>\n                <option value='3'>High</option>\n            </select>\n                <input type='submit'/>\n            </form>\n        </div>\n    );\n}\n\nexport default FormCreateTask;\n","import React from 'react';\n\nconst statuses = ['Todo', 'Progress', 'Review', 'Done'];\nconst colors = ['bg-success', 'bg-warning', 'bg-danger'];\n\nfunction Task({task, updateTask, index, tasks, edit}) {\n    return (\n        <div className='card mb-3'>\n            <div className={'card-header text-white ' + colors[task.priority - 1]}>{task.title}</div>\n            <div className='card-body'>\n                <div>{task.description}</div>\n                <div className=\"text-secondary\">Priority: {['Low','Medium','High'][task.priority - 1]}</div>\n                <div>\n                    <button disabled={index === 0} onClick={() => {\n                        task.status = statuses[index - 1];\n                        updateTask()\n                    }}>&lt;</button>\n                    <button disabled={index === 3} onClick={() => {\n                        task.status = statuses[index + 1];\n                        updateTask()\n                    }}>&gt;</button>\n                    <button onClick={() => {\n                        tasks.splice(tasks.indexOf(task), 1);\n                        updateTask()\n                    }}>&times;</button>\n                    <button onClick={() => edit(task)}>Edit</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Task;\n","import React from 'react';\nimport Task from \"./Task\";\n\nfunction Board({status, tasks=[], updateTask, index, edit}) {\n    return (\n        <div className='col'>\n            <div className=\"columnHeader font-weight-bold text-secondary mb-2\">{status}</div>\n            {\n                tasks\n                    .filter(el => el.status === status)\n                    .map(el => <Task\n                        task={el}\n                        key={el.id}\n                        index={index}\n                        updateTask={updateTask}\n                        tasks={tasks}\n                        edit={edit}\n                    />)\n            }\n        </div>\n    );\n}\n\nexport default Board;\n\n/*\n\nimport {get} from 'lodash';\n\nfunction Board(props) {\n    const tasks = get(props, 'tasks', []);\n\nvs\n\nfunction Board({status, tasks=[]) {\n\n*/\n","import React from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction ModalBlock({close, modal}) {\n    const task = modal || {};\n    const submit = (e) => {\n        e.preventDefault();\n        task.title = e.target[1].value;\n        task.description = e.target[2].value;\n        task.priority = e.target[3].value;\n        close();\n    };\n    return (\n        <div>\n            <Modal show={!!modal} onHide={close}>\n                <form onSubmit={submit}>\n                    <Modal.Header closeButton>Edit Task</Modal.Header>\n                    <Modal.Body>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"inputTaskTitle\">Title</label>\n                            <input\n                                className=\"form-control\"\n                                id=\"inputTaskTitle\"\n                                aria-describedby=\"emailHelp\"\n                                defaultValue={task.title}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"inputTaskDescription\">Description</label>\n                            <textarea\n                                className=\"form-control\"\n                                id=\"inputTaskDescription\"\n                                aria-describedby=\"emailHelp\"\n                                defaultValue={task.description}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"priority\">Priority</label>\n                            <select className=\"form-control\" id=\"priority\">\n                                <option value='1'>Low</option>\n                                <option value='2'>Medium</option>\n                                <option value='3'>High</option>\n                            </select>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" type='submit'>Save</Button>{' '}\n                        <Button variant=\"secondary\" onClick={close}>Cancel</Button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        </div>\n    );\n}\n\nexport default ModalBlock;\n","import React, {useState} from 'react';\nimport FormCreateTask from \"./FormCreateTask\";\nimport Board from \"./Board\";\nimport Modal from \"./Modal\";\nimport {v4 as uuidv4} from 'uuid';\nimport './app.css';\n\nconst initialTasks = [\n    {\n        id: uuidv4(),\n        title: 'First Task',\n        description: 'Description 1',\n        priority: 1,\n        status: 'Todo'\n    },\n    {\n        id: uuidv4(),\n        title: 'First Task 2',\n        description: 'Description 1',\n        priority: 2,\n        status: 'Todo'\n    },\n    {\n        id: uuidv4(),\n        title: 'Second Task',\n        description: 'Description 2',\n        priority: 3,\n        status: 'Review'\n    },\n    {\n        id: uuidv4(),\n        title: 'Third Task',\n        description: 'Description 3',\n        priority: 3,\n        status: 'Progress'\n    },\n    {\n        id: uuidv4(),\n        title: 'Fourth Task',\n        description: 'Description 4',\n        priority: 3,\n        status: 'Done'\n    },\n\n];\nconst statuses = ['Todo', 'Progress', 'Review', 'Done'];\n\nfunction App() {\n    const [tasks, setTasks] = useState(initialTasks);\n    const [modal, setModal] = useState(false);\n    const addTask = e => {\n        e.preventDefault();\n        const newTask = {\n            id: uuidv4(),\n            title: e.target[0].value,\n            priority: e.target[1].value,\n            status: 'Todo'\n        };\n        e.target.reset();\n        setTasks([...tasks, newTask]);\n    };\n    const updateTask = () => {\n        setTasks([...tasks]);\n    };\n    const edit = (task) => {\n        setModal(task);\n    };\n    const close = () => {\n        setModal(false);\n    };\n    return (\n        <div>\n            <FormCreateTask addTask={addTask}/>\n            <div className='container-xl'>\n                <div className='row'>\n                    {\n                        statuses.map((el, index) =>\n                            <Board\n                                status={el}\n                                key={el}\n                                index={index}\n                                tasks={tasks}\n                                updateTask={updateTask}\n                                edit={edit}\n                            />)\n                    }\n                </div>\n            </div>\n            <Modal modal={modal} close={close}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './homework9_kanban/App';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log('--ReactDOM.render start');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nconsole.log('--ReactDOM.render end');\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}