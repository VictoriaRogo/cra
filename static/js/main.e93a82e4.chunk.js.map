{"version":3,"sources":["homework4/CountBtn.js","homework4/Counter.js","homework4/App.js","serviceWorker.js","index.js"],"names":["CountBtn","props","className","onClick","setCount","count","Number","value","Counter","useState","props1","App","num","setNum","res","i","push","counters","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAceA,MAXf,SAAkBC,GAId,OACI,4BAAQC,UAAW,WAAYC,QAJtB,WACTF,EAAMG,SAASH,EAAMI,MAAQC,OAAOL,EAAMM,UAIrCN,EAAMM,QCcJC,MAjBf,WAAoB,IAAD,EACWC,mBAAS,GADpB,mBACRJ,EADQ,KACDD,EADC,KAEXM,EAAS,CAACH,MAAO,KAAMF,MAAOA,EAAOD,SAAUA,GACnD,OACI,yBAAKF,UAAW,WACVF,EAASU,GACX,kBAAC,EAAD,CAAUH,MAAO,KAAMF,MAAOA,EAAOD,SAAUA,IAC/C,kBAAC,EAAD,CAAUG,MAAO,KAAMF,MAAOA,EAAOD,SAAUA,IAC/C,0BAAMF,UAAW,gBAAiBG,GAClC,kBAAC,EAAD,CAAUE,MAAO,KAAMF,MAAOA,EAAOD,SAAUA,IAC/C,kBAAC,EAAD,CAAUG,MAAO,KAAMF,MAAOA,EAAOD,SAAUA,IAC/C,kBAAC,EAAD,CAAUG,MAAO,KAAMF,MAAOA,EAAOD,SAAUA,MCc5CO,MA1Bf,WAAgB,IAAD,EAEWF,mBAAS,GAFpB,mBAEJG,EAFI,KAECC,EAFD,KAgBX,OACI,yBAAKX,UAAW,OACZ,6BAVS,WAEb,IADA,IAAIY,EAAM,GACDC,EAAK,EAAGA,EAAIH,EAAKG,IACtBD,EAAIE,KAAK,kBAAC,EAAD,OAEb,OAAOF,EAMEG,IAEL,4BAAQf,UAAW,WAAYC,QAjBpB,WACfU,EAAOD,EAAM,KAgBT,iBCdQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e93a82e4.chunk.js","sourcesContent":["import React from 'react';\nimport './CountBtn.css';\n\nfunction CountBtn(props) {\n    const send = () => {\n        props.setCount(props.count + Number(props.value));\n    }\n    return (\n        <button className={'CountBtn'} onClick={send}>\n            {props.value}\n        </button>\n    );\n}\n\nexport default CountBtn;\n","import React, {useState} from 'react';\nimport './App.css';\nimport CountBtn from \"./CountBtn\";\n\n// <CountBtn value={'-3'} count={count} setCount={setCount} />\n\nfunction Counter() {\n    const [count, setCount] = useState(0);\n    let props1 = {value: '-3', count: count, setCount: setCount}\n    return (\n        <div className={'Counter'}>\n            { CountBtn(props1) }\n            <CountBtn value={'-2'} count={count} setCount={setCount}/>\n            <CountBtn value={'-1'} count={count} setCount={setCount}/>\n            <span className={'CounterValue'}>{count}</span>\n            <CountBtn value={'+1'} count={count} setCount={setCount}/>\n            <CountBtn value={'+2'} count={count} setCount={setCount}/>\n            <CountBtn value={'+3'} count={count} setCount={setCount}/>\n\n        </div>\n    );\n}\n\nexport default Counter;\n","import React, {useState} from 'react';\nimport Counter from \"./Counter\";\nimport './App.css';\nimport './CountBtn.css';\n\nfunction App() {\n\n    const [num, setNum] = useState(3);\n\n    const addCounter = () => {\n        setNum(num + 1);\n    }\n\n    const counters = () => {\n        let res = [];\n        for (let i  = 0; i < num; i++) {\n            res.push(<Counter/>)\n        }\n        return res;\n    }\n\n    return (\n        <div className={\"App\"}>\n            <div>\n                {counters()}\n            </div>\n            <button className={'CountBtn'} onClick={addCounter}>Add Counter</button>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './homework4/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}