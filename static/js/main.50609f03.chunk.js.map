{"version":3,"sources":["homework7_2/Form.js","homework7_2/List.js","homework7_2/App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onSubmit","addItem","type","List","todoItems","map","el","i","key","title","checked","done","onChange","toggle","defaultValue","onBlur","e","updateTitle","target","value","onClick","deleteItem","swap","length","initialState","App","useState","list","setList","preventDefault","record","slice","index","filter","id1","id2","copy","Boolean","window","location","hostname","match","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sLAaeA,MAXf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,0BAAMC,SAAUF,EAAMG,SAClB,gCACA,4BAAQC,KAAK,UAAb,UCyBDC,MA7Bf,SAAcL,GAsBV,OACI,yBAAKC,UAAU,QACVD,EAAMM,UAAUC,KAvBZ,SAACC,EAAIC,GAAL,OACT,yBAAKC,IAAKF,EAAGG,MAAQF,GACjB,2BACIL,KAAK,WACLH,UAAU,QACVW,QAASJ,EAAGK,KACZC,SAAU,kBAAMd,EAAMe,OAAON,MAGjC,2BACIO,aAAcR,EAAGG,MACjBV,UAAWO,EAAGK,KAAO,kBAAoB,aACzCI,OAAQ,SAACC,GAAD,OAAOlB,EAAMmB,YAAYV,EAAGS,EAAEE,OAAOC,UAGjD,4BAAQC,QAAS,kBAAMtB,EAAMuB,WAAWd,KAAxC,QACO,IAANA,GAAY,4BAAQa,QAAS,kBAAMtB,EAAMwB,KAAKf,EAAGA,EAAE,KAAvC,UACZA,IAAMT,EAAMM,UAAUmB,OAAS,GAAK,4BAAQH,QAAS,kBAAMtB,EAAMwB,KAAKf,EAAGA,EAAE,KAAvC,gBChB3CiB,EAAe,CACjB,CAACf,MAAO,QAASE,MAAM,GACvB,CAACF,MAAO,SAAUE,MAAM,GACxB,CAACF,MAAO,QAASE,MAAM,IAgDZc,MA7Cf,WAAgB,IAAD,EACaC,mBAASF,GADtB,mBACJG,EADI,KACEC,EADF,KA+BX,OACI,yBAAK7B,UAAU,OACX,kBAAC,EAAD,CAAME,QA/BE,SAACe,GAMbA,EAAEa,iBACF,IAAMC,EAAS,CAACrB,MAAOO,EAAEE,OAAO,GAAGC,MAAOR,MAAM,GAChDK,EAAEE,OAAO,GAAGC,MAAQ,GACpBS,EAAQ,GAAD,mBAAKD,GAAL,CAAWG,QAuBd,kBAAC,EAAD,CACI1B,UAAWuB,EACXd,OAvBG,SAACN,GACZoB,EAAKpB,GAAGI,MAAQgB,EAAKpB,GAAGI,KACxBiB,EAAQD,EAAKI,UAsBLd,YApBQ,SAACV,EAAGE,GACpBkB,EAAKpB,GAAGE,MAAQA,EAChBmB,EAAQD,EAAKI,UAmBLV,WAjBO,SAACW,GAChBJ,EAAQD,EAAKM,QAAO,SAAC3B,EAAIC,GAAL,OAAWA,IAAMyB,OAiB7BV,KAfC,SAACY,EAAKC,GACjB,IAAMC,EAAOT,EAAKI,QAClBK,EAAKF,GAAOP,EAAKQ,GACjBC,EAAKD,GAAOR,EAAKO,GACjBN,EAAQQ,QC3BMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,QAAQC,IAAI,2BACZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAE1BN,QAAQC,IAAI,yBDsHN,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMC,a","file":"static/js/main.50609f03.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Form(props) {\n    return (\n        <div className=\"Form\">\n            <form onSubmit={props.addItem}>\n                <input/>\n                <button type='Submit'>Add</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Form;","import React from 'react';\nimport './App.css';\n\nfunction List(props) {\n    const item = (el, i) => (\n        <div key={el.title + i}>\n            <input\n                type='checkbox'\n                className=\"check\"\n                checked={el.done}\n                onChange={() => props.toggle(i)}\n            />\n\n            <input\n                defaultValue={el.title}\n                className={el.done ? \"done inlineEdit\" : \"inlineEdit\"}\n                onBlur={(e) => props.updateTitle(i, e.target.value)}\n            />\n\n            <button onClick={() => props.deleteItem(i)}>&times;</button>\n            {i !== 0  && <button onClick={() => props.swap(i, i-1)}>&#8593;</button>}\n            {i !== props.todoItems.length - 1 && <button onClick={() => props.swap(i, i+1)}>&#8595;</button>}\n\n        </div>\n    );\n    return (\n        <div className=\"List\">\n            {props.todoItems.map(item)}\n        </div>\n    );\n}\n\nexport default List;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Form from \"./Form\";\nimport List from \"./List\";\n\nconst initialState = [\n    {title: 'First', done: false},\n    {title: 'Second', done: false},\n    {title: 'Third', done: false}\n];\n\nfunction App() {\n    const [list, setList] = useState(initialState);\n    const addItem = (e) => {\n        // e - event (submit form)\n        // e.target - обращаемяс к тэгу form\n        // e.target[0] - input\n        // e.target[0].value - our string\n        // preventDefault - чтобы страница не перегружалась при нажатии Add\n        e.preventDefault();\n        const record = {title: e.target[0].value, done: false};\n        e.target[0].value = '';\n        setList([...list, record]);\n    };\n    const toggle = (i) => {\n        list[i].done = !list[i].done;\n        setList(list.slice());\n    };\n    const updateTitle = (i, title) => {\n        list[i].title = title;\n        setList(list.slice());\n    };\n    const deleteItem = (index) => {\n        setList(list.filter((el, i) => i !== index));\n    };\n    const swap = (id1, id2) => {\n      const copy = list.slice();\n      copy[id1] = list[id2];\n      copy[id2] = list[id1];\n      setList(copy);\n    };\n\n    return (\n        <div className=\"App\">\n            <Form addItem={addItem}/>\n            <List\n                todoItems={list}\n                toggle={toggle}\n                updateTitle={updateTitle}\n                deleteItem={deleteItem}\n                swap={swap}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './homework7_2/App';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log('--ReactDOM.render start');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nconsole.log('--ReactDOM.render end');\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}