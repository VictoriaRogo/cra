{"version":3,"sources":["homework5/Row.js","homework5/App.js","serviceWorker.js","index.js"],"names":["Row","props","className","onClick","updateCounter","index","count","deleteCounter","App","useState","counters","setCounters","filter","_","i","value","newCounters","map","el","key","Boolean","window","location","hostname","match","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iQAeeA,MAZf,SAAaC,GACT,OACI,6BACI,4BAAQC,UAAW,SAAUC,QAAS,kBAAMF,EAAMG,cAAcH,EAAMI,MAAOJ,EAAMK,MAAM,KAAzF,KACA,0BAAMJ,UAAW,SAAUD,EAAMK,OACjC,4BAAQJ,UAAW,SAAUC,QAAS,kBAAMF,EAAMG,cAAcH,EAAMI,MAAOJ,EAAMK,MAAM,KAAzF,KACA,4BAAQJ,UAAW,SAAUC,QAAS,kBAAMF,EAAMG,cAAcH,EAAMI,MAAO,KAA7E,SACA,4BAAQH,UAAW,SAAUC,QAAS,kBAAMF,EAAMM,cAAcN,EAAMI,MAAO,KAA7E,Y,MCyCGG,MA/Cf,WAAgB,IAAD,EACqBC,mBAAS,CAAC,EAAG,EAAG,IADrC,mBACJC,EADI,KACMC,EADN,KAOLJ,EAAgB,SAACF,GACnBM,EAAYD,EAASE,QAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMT,OAW1CD,EAAgB,SAACC,EAAOU,GAC1B,IAAMC,EAAW,YAAON,GACxBM,EAAYX,GAASU,EACrBJ,EAAYK,IAahB,OACI,yBAAKd,UAAW,OACZ,yBAAKA,UAAW,YACZ,4BAAQA,UAAW,SAAUC,QAnCtB,WACfQ,EAAY,GAAD,mBAAKD,GAAL,CAAe,OAkClB,eACA,4BAAQR,UAAW,SAAUC,QAxBxB,SAACE,GACdM,EAAYD,EAASO,KAAI,kBAAM,QAuBvB,aACA,4BAAQf,UAAW,SAAUC,QA7BvB,WACdQ,EAAY,MA4BJ,eAEJ,6BAAMD,EAASO,KAjBL,SAACC,EAAIJ,GAAL,OACd,kBAAC,EAAD,CACIK,IAAKL,EACLT,MAAOS,EACPR,MAAOY,EACPd,cAAeA,EACfG,cAAeA,UCvBPa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,QAAQC,IAAI,2BACZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAE1BN,QAAQC,IAAI,yBDsHN,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMC,c","file":"static/js/main.82123e22.chunk.js","sourcesContent":["import React from \"react\";\nimport './Row.css';\n\nfunction Row(props) {\n    return (\n        <div>\n            <button className={'Button'} onClick={() => props.updateCounter(props.index, props.count-1)}>-</button>\n            <span className={'Count'}>{props.count}</span>\n            <button className={'Button'} onClick={() => props.updateCounter(props.index, props.count+1)}>+</button>\n            <button className={'Button'} onClick={() => props.updateCounter(props.index, 0)}>Reset</button>\n            <button className={'Button'} onClick={() => props.deleteCounter(props.index, 0)}>Delete</button>\n        </div>\n    );\n}\n\nexport default Row;","import React, {useState} from \"react\";\nimport Row from \"./Row\";\nimport './App.css';\n\nfunction App() {\n    const [counters, setCounters] = useState([0, 0, 0])\n\n    const addCounter = () => {\n        setCounters([...counters, 0]);\n    };\n\n    const deleteCounter = (index) => {\n        setCounters(counters.filter((_, i) => i !== index));\n    };\n\n    const deleteAll = () => {\n        setCounters([]);\n    };\n\n    const resetAll = (index) => {\n        setCounters(counters.map(() => 0));\n    };\n\n    const updateCounter = (index, value) => {\n        const newCounters = [...counters];\n        newCounters[index] = value;\n        setCounters(newCounters);\n    };\n\n    const createRow = (el, i) => (\n        <Row\n            key={i}\n            index={i}\n            count={el}\n            updateCounter={updateCounter}\n            deleteCounter={deleteCounter}\n        />\n    );\n\n    return (\n        <div className={\"App\"}>\n            <div className={'Controls'}>\n                <button className={'Button'} onClick={addCounter}>Add Counter</button>\n                <button className={'Button'} onClick={resetAll}>Reset All</button>\n                <button className={'Button'} onClick={deleteAll}>Delete All</button>\n            </div>\n            <div>{counters.map(createRow)}</div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './homework5/App';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log('--ReactDOM.render start');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nconsole.log('--ReactDOM.render end');\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}